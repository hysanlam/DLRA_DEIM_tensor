% addpath('../core')
% n = 100;                        % Number of points in each dimension
% % Define parameters
% gamma = 10;
% j1 = 75; k1 = 25; l1 = 1; % First peak position
% j2 = 25; k2 = 75; l2 = 100; % Second peak position
% 
% % Initialize the 3D array
% A = zeros(n, n, n);
% 
% % Compute values based on the given formula
% for j = 1:n
%     for k = 1:n
%         for l = 1:n
%             A(j, k, l) = exp(-1/gamma^2 * ((j - j1)^2 + (k - k1)^2 + (l - l1)^2)) + exp(-1/gamma^2 * ((j - j2)^2 + (k - k2)^2 + (l - l2)^2));
%         end
%     end
% end
% 
% 
% Y_inital = A;
% F_full=@(X) F_eval_full(X);
% h=0.5e-3;
% for i=1:20
%     Y_inital=RK4(Y_inital,F_full,h);
% end
% 
% 
% T=1;
% 
% 
% h=0.5e-3;
% Y_RK4=Y_inital;
% Y_euler=Y_inital;
% for i=1:T./h
%     i
%     Y_RK4=RK4(Y_RK4,F_full,h);
% end


error_rk2=[];
error_rk2_table=[];
error_rk3=[];
error_rk3_table=[];
error_euler=[];
time =logspace(-1,-2.8,10);

dt=T./round(T./time);

for ranks=[10]
    r=[ranks ranks ranks];
    error_rk2=[];
    for h=dt
        Y_projected_rk3=hosvd(tensor(Y_inital),1e-10,'ranks',r);
        Y_projected_euler=Y_projected_rk3;
        Y_projected_rk2=Y_projected_euler;

        for i=1:T./h
            Y_projected_rk3=projected_rk3_deim(Y_projected_rk3,h,@F_eval_entries,@F_eval,r,"QDEIM");
            Y_projected_euler=projected_euler_deim(Y_projected_euler,h,@F_eval_entries,@F_eval,r,"QDEIM");
            Y_projected_rk2=projected_rk2_deim(Y_projected_rk2,h,@F_eval_entries,@F_eval,r,"QDEIM");
        end

        error_rk2=[error_rk2,norm(Y_RK4-full(Y_projected_rk2))];
        error_euler=[error_euler,norm(Y_RK4-full(Y_projected_euler))];
        error_rk3=[error_rk3,norm(Y_RK4-full(Y_projected_rk3))];
    end

end

subplot(1,2,1);
loglog(dt,error_euler,LineWidth=1.5,Marker='o')
hold on
loglog(dt,error_rk2,LineWidth=1.5,Marker='o')
loglog(dt,error_rk3,LineWidth=1.5,Marker='o')
loglog(dt,100*dt,LineWidth=1,LineStyle="--")
loglog(dt,100*dt.^2,LineWidth=1,LineStyle="--")
loglog(dt,100*dt.^3,LineWidth=1,LineStyle="--")
legend("PRK-DEIM 1","PRK-DEIM 2","PRK-DEIM 3","Slope 1","Slope 2","Slope 3")
xlabel('time')
ylabel('Absolute error')
set(gca,'FontSize',15)

error_rk3=[];
error_rk3_table=[];
error_euler=[];
time =logspace(-1,-2.8,10);

dt=T./round(T./time);


for ranks=[4,6,8,10]
    r=[ranks ranks ranks];
    error_rk3=[];
    for h=dt
        Y_projected_rk3=hosvd(tensor(Y_inital),1e-10,'ranks',r);
        for i=1:T./h
            Y_projected_rk3=projected_rk3_deim(Y_projected_rk3,h,@F_eval_entries,@F_eval,r,"QDEIM");
        end
        error_rk3=[error_rk3,norm(Y_RK4-full(Y_projected_rk3))];
    end
    error_rk3_table=[error_rk3_table; error_rk3];
end
subplot(1,2,2);
loglog(dt,error_rk3_table(1,:),LineWidth=1.5,Marker='o')
hold on
loglog(dt,error_rk3_table(2,:),LineWidth=1.5,Marker='o')
hold on
loglog(dt,error_rk3_table(3,:),LineWidth=1.5,Marker='o')
hold on
loglog(dt,error_rk3_table(4,:),LineWidth=1.5,Marker='o')
hold on
loglog(dt,100*dt.^3,LineWidth=1,LineStyle="--")
legend("PRK-DEIM 3 (rank 4)","PRK-DEIM 3 (rank 6)","PRK-DEIM 3 (rank 8)","PRK-DEIM 3 (rank 10)","Slope 3")
xlabel('time')
ylabel('Absolute error')
set(gca,'FontSize',15)

function F_val=F_eval(X)
eps=1e-1;
X=full(X).data;
X_cube=abs((X.^2)).*X;

F_val=1i./2*compute_L(X)+eps*X_cube;
F_val=hosvd(tensor(F_val),1e-16);

end

function F_val=F_eval_full(X)

eps=1e-1;
X_cube=abs((X.^2)).*(X);

F_val=1i./2*compute_L(X)+eps*X_cube;

end

function F_val=F_eval_entries(X,p1,p2,p3)
eps=1e-1;
X=full(X).data;
X_cube=abs((X(p1,p2,p3).^2)).*X(p1,p2,p3);
F_val=1i./2*compute_L_entries(X,p1,p2,p3)+eps*X_cube;
F_val=tensor(F_val);

end


function L = compute_L(A)

L = zeros(size(A), 'like', A);

% j-direction neighbors
L(2:end,   :,   :) = L(2:end,   :,   :) + A(1:end-1, :,   :);
L(1:end-1, :,   :) = L(1:end-1, :,   :) + A(2:end,   :,   :);

% k-direction neighbors
L(:, 2:end,   :) = L(:, 2:end,   :) + A(:, 1:end-1, :);
L(:, 1:end-1, :) = L(:, 1:end-1, :) + A(:, 2:end,   :);

% l-direction neighbors
L(:,   :, 2:end) = L(:,   :, 2:end) + A(:,   :, 1:end-1);
L(:,   :, 1:end-1) = L(:,   :, 1:end-1) + A(:,   :, 2:end);

end


function L = compute_L_entries(A,p1,p2,p3)

L = zeros(length(p1),length(p2),length(p3));

% Loop over all valid j,k,l from 1 to 100
L = zeros(size(A), 'like', A);

% j-direction neighbors
L(2:end,   :,   :) = L(2:end,   :,   :) + A(1:end-1, :,   :);
L(1:end-1, :,   :) = L(1:end-1, :,   :) + A(2:end,   :,   :);

% k-direction neighbors
L(:, 2:end,   :) = L(:, 2:end,   :) + A(:, 1:end-1, :);
L(:, 1:end-1, :) = L(:, 1:end-1, :) + A(:, 2:end,   :);

% l-direction neighbors
L(:,   :, 2:end) = L(:,   :, 2:end) + A(:,   :, 1:end-1);
L(:,   :, 1:end-1) = L(:,   :, 1:end-1) + A(:,   :, 2:end);
L=L(p1,p2,p3);
end








